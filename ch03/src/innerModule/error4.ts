/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   error4.ts                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: honlee <honlee@student.42seoul.kr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/06/12 16:07:18 by honlee            #+#    #+#             */
/*   Updated: 2021/06/12 16:13:56 by honlee           ###   ########seoul.kr  */
/*                                                                            */
/* ************************************************************************** */

// 이번에는 정말 예측이 불가능한 에러를 처리하는 방법을 알아보겠습니다.

process.on('uncaughtException', (err) => {
	console.error('uncaughtException !!!', err);
});

setInterval(() => {
	throw new Error('server down!');
}, 1000);

setTimeout(() => {
	console.log('this is called');
}, 2000);

// try - catch 로 처리하지 못한 에러가 발생했지만, 코드가 제대래로 실행되었습니다.

// 어떻게 보면 process.on('uncaughtException' ~ ) 로 모든 에러를 처리 할 수 있을 것 같습니다.
// 하지만 노드 공식 ㅜㅁㄴ서에서는 uncaughtException 이벤트를 최후의 수단으로 사용할 것을 명시하고 있습니다.
// 노드는 uncaughtException 이벤트 후 다음 동작이 제대로 동작하는지를 보증 하지 않습니다.
// 즉, 복구 작업 코드를 넣어 두었더라도 그것이 동작하는지 확신 할 수 없습니다.
// 따라서 uncaughtException 단순히 에러 내용을 기록 하는 정도로 사용하고, 에러를 기록한 후 
// process.exit() 으로 프로세스를 종료하는 것이 좋습니다.
// 에러가 발생하는 코드를 수정하지 않는 이상, 프로세스가 실행되는 동안 에러는 계속 발생될 것입니다.

// 따라서 에러 발생 시 철저히 기록(로깅) 하는 습관을 들이고, 주기적으로 로그를 확인하면서 보완해 나가야 합니다.